openapi: 3.0.3
info:
  title: API de Autenticación TMS
  description: API para gestión de autenticación y autorización del sistema TMS
  version: 1.0.0
  contact:
    name: Equipo de Desarrollo
    email: development@dliriotech.com

servers:
  - url: /
    description: Servidor actual

tags:
  - name: Autenticación
    description: Operaciones de inicio de sesión y validación
  - name: Usuarios
    description: Operaciones de gestión de usuarios
  - name: Tokens
    description: Operaciones relacionadas con tokens

security:
  - ServiceApiKey: []

paths:
  /api/auth/login:
    post:
      tags:
        - Autenticación
      summary: Iniciar sesión
      description: Autentica a un usuario y devuelve un token JWT
      operationId: login
      security:
        - ServiceApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Usuario autenticado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/auth/validate:
    get:
      tags:
        - Autenticación
      summary: Validar token
      description: Valida si un token JWT es válido
      operationId: validateToken
      security:
        - ServiceApiKey: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
      responses:
        '200':
          description: Resultado de la validación
          content:
            application/json:
              schema:
                type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/users/register:
    post:
      tags:
        - Usuarios
      summary: Registrar usuario
      description: Registra un nuevo usuario en el sistema
      operationId: register
      security:
        - ServiceApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/tokens/generate:
    post:
      tags:
        - Tokens
      summary: Generar token
      description: Genera un token para un usuario y empresa específicos
      operationId: generateToken
      security:
        - ServiceApiKey: []
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: empresaId
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: sessionToken
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Token generado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/tokens/refresh:
    post:
      tags:
        - Tokens
      summary: Renovar token
      description: Renueva un token JWT existente
      operationId: refreshToken
      security:
        - ServiceApiKey: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
      responses:
        '200':
          description: Token renovado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    ServiceApiKey:
      type: apiKey
      name: X-Service-API-Key
      in: header
      description: Clave API para autenticar servicios

  schemas:
    LoginRequest:
      type: object
      required:
        - userName
        - password
      properties:
        userName:
          type: string
          description: Nombre de usuario
        password:
          type: string
          description: Contraseña
          format: password

    LoginResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int32
          description: ID del usuario
        userName:
          type: string
          description: Nombre de usuario
        role:
          type: string
          description: Rol del usuario
        empresas:
          type: array
          description: Lista de empresas asociadas al usuario
          items:
            $ref: '#/components/schemas/EmpresaInfo'
        token:
          type: string
          description: Token JWT
        sessionToken:
          type: string
          description: Token de sesión temporal para selección de empresa
        name:
          type: string
          description: Nombre del usuario
        lastName:
          type: string
          description: Apellido del usuario

    EmpresaInfo:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: ID de la empresa

    RegisterRequest:
      type: object
      required:
        - userName
        - password
        - role
        - name
        - lastName
        - phoneNumber
      properties:
        userName:
          type: string
          description: Nombre de usuario
        password:
          type: string
          description: Contraseña
          format: password
          minLength: 6
        role:
          type: string
          description: Rol del usuario
        name:
          type: string
          description: Nombre del usuario
        lastName:
          type: string
          description: Apellido del usuario
        phoneNumber:
          type: string
          description: Número de teléfono
          minLength: 9
        email:
          type: string
          description: Correo electrónico
          format: email

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: ID del usuario
        userName:
          type: string
          description: Nombre de usuario
        role:
          type: string
          description: Rol del usuario

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: Token JWT

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Código de error
        message:
          type: string
          description: Mensaje de error
        path:
          type: string
          description: Ruta de la solicitud
        timestamp:
          type: string
          format: date-time
          description: Fecha y hora del error

  responses:
    BadRequest:
      description: Solicitud inválida
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: No autorizado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Conflicto con recurso existente
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    TooManyRequests:
      description: Demasiadas solicitudes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'